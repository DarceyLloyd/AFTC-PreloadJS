let AFTCPreloader=function(e){me=this,options={onProgressHandler:!1,onCompleteHandler:!1},queue=[],noOfFilesToLoad=0,json=!1,noOfThreads=3,thread=[],queueCompleted=!1,head=!1,this.add=function(e,t){t||(t=!0);let o=this.ItemVo();o.src=e,o.autoAttach=t,queue.push(o)},init=function(e){for(let e=0;e<noOfThreads;e++)thread[e]="available";e?loadConfig(e):(noOfFilesToLoad=queue.length,processThreadPool())},loadConfig=function(e){let t=new XMLHttpRequest;t.open("GET",e,!0),t.onreadystatechange=function(e){4==t.readyState&&200==t.status&&(json=JSON.parse(t.responseText),json.forEach((e=>{let t=new ItemVo;e.hasOwnProperty("autoAttach")&&(t.autoAttach=e.autoAttach),t.src=e.src,t.ext=getFileExtension(t.src),queue.push(t)})),noOfFilesToLoad=queue.length,processThreadPool())},t.send()},processThreadPool=function(){for(let e=0;e<noOfThreads;e++)if("available"===thread[e]){let t=getNext(),o=t[0],n=t[1];!1!==n&&(thread[e]="filled",n.loading=!0,new XHRLoader(this,e,o,n.src))}let e=!0;for(let t=0;t<noOfThreads;t++)"available"!==thread[t]&&(e=!1);e&&(log("AFTCPreloader(): Complete!"),this.options.onCompleteHandler&&this.options.onCompleteHandler())},onFileLoaded=function(e,t){let o=this.queue[t];if(o.loading=!1,o.loaded=!0,this.thread[e]="available",!0===this.queue[t].autoAttach)if("js"==o.ext){let e=document.createElement("script");e.src=o.src,document.head.appendChild(e)}else if("css"==o.ext){let e=document.createElement("link");e.rel="stylesheet",e.type="text/css",e.href=o.src,e.media="all",head.appendChild(e)}if(this.options.onProgressHandler){let e=0,o=0;for(let e=0;e<queue.length;e++){queue[e].loaded&&o++}e=Math.round(100/noOfFilesToLoad*o),options.onProgressHandler(e,queue[t].src)}processThreadPool()},getNext=function(){let e=-1,t=!1;for(let o=0;o<queue.length;o++){let n=queue[o];if(!1===n.loaded&&!1===n.loading){e=o,t=n;break}}return[e,t]},this.help=function(){let e="";e+="AFTCPreloader.help()\n",e+="JSON: [ {src:path,autoAttach=true} ]\n",e+="autoAttach is optional, defaults to true, only works for css and js file extensions\n",log("AFTCPreloader.help()\nJSON: [ {src:path,autoAttach=true} ]\nautoAttach is optional, defaults to true, only works for css and js file extensions\n")},this.start=function(e){log("AFTCPreloader.start()"),init(e)},log=function(e){console.log(e)},ItemVo=function(){this.id=!1,this.src=!1,this.ext=!1,this.loaded=!1,this.loading=!1,this.autoAttach=!0},XHRLoader=function(e,t,o,n){let a=new XMLHttpRequest;a.onload=function(n){e.onFileLoaded(t,o),a=null},a.open("GET",n,!0),a.send()},getFileExtension=function(e){return e.slice(2+(e.lastIndexOf(".")-1>>>0))},objectToObject=function(e,t,o){for(var n in null==o&&(o=!0),e)o?t.hasOwnProperty(n)?t[n]=e[n]:console.warn("argsToObject(): Argument ["+n+"] is not available."):t[n]=e[n]},log("AFTCPreloader()"),objectToObject(e,options,!0),head=document.getElementsByTagName("head")[0]||document.body};